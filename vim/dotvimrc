"---------------------------------------------------------"
"set vim environment variable
"---------------------------------------------------------"
set nocompatible
set cursorline

" vsplit line type
" highlight VertSplit ctermbg=0 ctermfg=255
set fillchars=vert:\  

if has('syntax')
	syntax on
endif

" line number
set nu 
set relativenumber

" line display
set nowrap

" status line
set statusline=%<%f\ %h%m%r%=%-14.(%l,%c%V,%L%)\ %P

" auto ident
set ai 
" set autoindent equals to 4 spaces
set tabstop=8
set softtabstop=8
set shiftwidth=8
set noexpandtab
" background color
" set background=light
" vim theme
colorscheme industry

" display completion matches in a status line
set wildmenu

" while typing a search comman, show where pattern as it was typed so far, matches
" set incsearch
set nohlsearch
set ignorecase
 
" enable mouse
if has('mouse')
	set mouse=a
endif
"---------------------------------------------------------"
" end set vim environment variable
"---------------------------------------------------------"

"---------------------------------------------------------"
" set key map
"---------------------------------------------------------"
" keyboard remap
map S :w<CR>
map s <nop>
map R :source $MYVIMRC<CR>
map Q :q<CR>
imap <C-N>  <Esc>

" split window
map sl :set splitright<CR>:vnew<CR>
map sh :set nosplitright<CR>:vnew<CR>
map sj :set splitbelow<CR>:new<CR>
map sk :set nosplitbelow<CR>:new<CR>

" new tab page
map tp :tabnew<CR>
map tl :tabnext<CR>
map th :tabprevious<CR>
map <tab> :tabnext<CR>
map <S-tab> :tabprevious<CR>

" toggle cursor between windows 
map <C-H> <C-W>h
map <C-J> <C-W>j
map <C-K> <C-W>k
map <C-L> <C-W>l

" resize window
map <S-j> :res -4<CR>
map <S-k> :res +4<CR>
map <S-l> :vertical resize+4<CR>
map <S-h> :vertical resize-4<CR>

" move window
map mj <c-w>J
map mk <c-w>K
map ml <c-w>L
map mh <c-w>H
map mt <c-w>T

" terminal window
" :term bash --> toggle terminal
if has('terminal')
	map tt :term bash<CR>
	tnoremap <ESC> <C-W>N
endif

"---------------------------------------------------------"
" ctags database path
"---------------------------------------------------------"
" set tags=./tags, tags

"---------------------------------------------------------"
" cscope database path
"---------------------------------------------------------"
if has("cscope")
	set csprg=/usr/bin/cscope
	set csto=0
	set cst
	set nocsverb
	" add any database in current directory
	if filereadable("cscope.out")
		cs add cscope.out
	" else add database pointed to by environment
	elseif $CSCOPE_DB != ""
		cs add $CSCOPE_DB
	endif
	set csverb
endif


"---------------------------------------------------------"
" auto install vim-plug
"---------------------------------------------------------"
" if empty(glob('~/.vim/autoload/plug.vim'))
" 	!curl -fLo ~/.vim/autoload/plug.vim --create-dirs
" 		\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
" endif

"---------------------------------------------------------"
" set vim-plugin
" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
"---------------------------------------------------------"
call plug#begin('~/.vim/plugged')

"---------------------------------------------------------"
" how to install or uninstall plugin
"---------------------------------------------------------"
" install:
" step 1:
"   Plug 'plugin link'
" step 2:
"   :w and source ~/.vimrc
" step 3:
"   :PlugInstall
" uninstall:
" step 1:
"   comment the Plug 'plugin link'you want to uninsatll
" step 2:
"   :w and source ~/.vimrc
" step 3:
"   :PlugClean
"---------------------------------------------------------"
" directory tree
Plug 'scrooloose/nerdtree'

" source explorer
Plug 'wesleyche/SrcExpl'

" source code browser, it read tag file created by ctags
" Plug 'vim-scripts/taglist.vim'

" displays tags in a window, ordered by scope
Plug 'majutsushi/tagbar'

" for intensely orgasmic commenting
Plug 'scrooloose/nerdcommenter'

" full path fuzzy file, buffer, tag, ... finder for vim
Plug 'kien/ctrlp.vim'

" Initialize plugin system
call plug#end()
"---------------------------------------------------------"
" end plugin
"---------------------------------------------------------"

"---------------------------------------------------------"
" set source explorer
"---------------------------------------------------------"
nmap <F8> :SrcExplToggle<CR>
let g:SrcExpl_winHeight = 8
let g:SrcExpl_refreshTime = 100
let g:SrcExpl_jumpKey = "<ENTER>"
let g:SrcExpl_gobackKey = "<SPACE>"
let g:SrcExpl_isUpdateTags = 0

"---------------------------------------------------------"
" set taglist --- deprecated
" nmap <F7> :TlistToggle<CR>
" let Tlist_Inc_Winwidth = 0
" let Tlist_Exit_OnlyWindow = 0
" let Tlist_Auto_Open = 0
" let Tlist_Use_Right_Window = 1
"---------------------------------------------------------"

"---------------------------------------------------------"
" set tagbar
"---------------------------------------------------------"
nmap <F7> :TagbarToggle<CR>

"---------------------------------------------------------"
" config nerdtree
"---------------------------------------------------------"
nmap <F9> :NERDTreeToggle<CR>
let NERDTreeMinimalUI = 1
let NERDTreeWinPos = "left"
" This param is only loaded once when vim starts
" so if you want change it, start vim again
let NERDTreeWinSize = 25
" auto open nerdtree window
" autocmd vimenter * NERDTree
" This is ONLY done in response to tree navigation mappings,
" i.e. NERDTree-C-J<K>, NERDTree-p<P>
let NERDTreeAutoCenter = 1
let NERDTreeAutoCenterThreshold = 3
" set natural sort order
" let NERDTreeNaturalSort = 1
let NERDTreeIgnore = []
let NERDTreeMouseMode = 1
" Whether the NERDTree window closes or bookmark table
" after opening a file. 0 --> No change
let NERDTreeQuitOnOpen = 0
" This setting is set to 1 then the bookmarks table will be displayed
" It also can be toggled by NERDTree-B
let NERDTreeShowBookmarks = 1
" This setting tells vim whether to display hidden files. [NERDTree-I]
let NERDTreeShowHidden = 0
"---------------------------------------------------------"
" end nerdtree configuration
"---------------------------------------------------------"

"---------------------------------------------------------"
" config ctrlp
"---------------------------------------------------------"
" This option to change the mapping to invoke CtrlP in Normal mode
let g:ctrlp_map = '<c-p>'
" Set this to 1 to set searching by filename (as opposed to full path)
let g:ctrlp_by_filename = 1
" Change the postion, the listing order of results
" the minimum and the maximum heights of the match window
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:10,results:10'
" CtrlP sets its local working directory
" let g:ctrlp_working_path_mode = 'ra'
" Set the directory to store the cache files: >
" let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'
"---------------------------------------------------------"
" end ctrlp configuration
"---------------------------------------------------------"

"---------------------------------------------------------"
" config nerdcommenter
"---------------------------------------------------------"
" let mapleader = ","
"---------------------------------------------------------"
" end nerdcommenter configuration
"---------------------------------------------------------"

" function
function! Foo()
	let x = 0
	function! Bar() closure
		let x += 1
		return x
	endfunction
	return funcref('Bar')
endfunction
